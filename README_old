
1. Copy the files to your own directory.

2. Modify inet.h to reflect the host you are currently logged into.
   Also, modify the port numbers to be used to reduce the likelihood
   of conflicting with another server.

3. Compile the source code using the command: make

4. Start the directory server in teh background or in another window: ./directoryServer2 [Optional '&' for background]

5. Start the server in the background or in another withdow: ./chatServer1 [Topic] [Port number] [Optional '&' for background]

6. Start the client with no arguments to get the server list on the same or another host in the foreground: ./chatClient2

7. Start the client with the desired server arguments: ./chatClient2 [Server IP] [Server port]

8. Remember to kill the server before logging off.

~

Code overview: chatClient2
I began with the chatClient1 version from my Assignment 3. I added different sections of code based on the value of argc to determine whether
or not the user has tried to access the directory (1 argument) or a specific server (3 arguments). The specific server case is
unchanged from Assignment 3, save for the use of arguments from the command line and validating that data wih the specific port numbers
of between 40000 and 65535. In the case of the data not validating, the client will close with an error message. In the 'access directory' 
case, the client connects to the directory by sending a '2', from where the directory will send the client a list of server topics, IP addresses, 
and ports, before the clinet exits. 

Code overview: chatServer2
I began with the chatServer1 from my Assignment 3. Since I can make the connection to the directory had to happen first, I could make it a 
blocking call. The server will first read in data from the command line and validate it, with the port number being between 40000 and 65535.
The server will then connect to the directory on the hardcoded IP and port of the directory, sending the directory a '1' to  register it 
as a server. If the data validation doesn't work, or if the directory is closed, then the server will exit.
The directory will then check to ensure the server's name isn't a duplicate, either sending back the server a '1' on a failure,
or the server's IP on a success. The server will then use the recieved IP and the port number from the command line to register it's own 
address for recieving clients, as was done by SERV_HOST_ADDR and SERV_TCP_PORT in Assignment 3. Additionally, when a server closes, the 
server will close it's connection to the directory, prompting it to remove it from it's active server list. After this point, the functionality 
of the server remains completely unchanged from Assignment 3. 

Code overview: directoryServer2
I began with the chatServer1 from my Assignment 3. The directory must handle two cases, that of a client connecting and that of a server
connecting. In the case of a client connecting, the directory will recieve a '2', printing it to list the client every server that is 
registered with the directory before forcefully exiting the client as the client and directory have no more need for each other at that 
point. In the case of a server connecting, the directory will recieve a '1', prompting it to register the server and check it's name with
the preexisting servers. If the server name is already in use, the directory will send the client a '1', otherwise it will send them a '0'
followed by the server's IP address. When the directory closes, no already opened servers will be affected. 